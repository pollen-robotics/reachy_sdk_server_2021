diff --git a/reachy_sdk_server/reachy_sdk_server.py b/reachy_sdk_server/reachy_sdk_server.py
index 48a23b0..d21137f 100644
--- a/reachy_sdk_server/reachy_sdk_server.py
+++ b/reachy_sdk_server/reachy_sdk_server.py
@@ -1,5 +1,6 @@
 """Expose main Reachy ROS services/topics through gRPC allowing remote client SDK."""
 
+import threading
 import time
 from collections import OrderedDict
 from concurrent.futures import ThreadPoolExecutor
@@ -21,7 +22,7 @@ from rclpy.node import Node
 
 from reachy_msgs.msg import JointTemperature, LoadSensor
 from reachy_msgs.srv import GetJointsFullState, SetCompliant
-from reachy_msgs.srv import GetArmIK, GetArmFK, GetOrbitaIK
+from reachy_msgs.srv import GetArmIK, GetArmFK, GetOrbitaIK, GetQuaternionTransform as GetQuatTf
 from reachy_msgs.srv import ZoomCommand, SetZoomSpeed
 
 from reachy_sdk_api import joint_command_pb2 as jc_pb, joint_command_pb2_grpc
@@ -128,6 +129,8 @@ class ReachySDKServer(Node,
         self.right_arm_fk = self.create_client(GetArmFK, '/reachy_right_arm_kinematics_service/forward')
         self.right_arm_ik = self.create_client(GetArmIK, '/reachy_right_arm_kinematics_service/inverse')
         self.orbita_ik = self.create_client(GetOrbitaIK, '/orbita_ik')
+        self.quat_tf = self.create_client(GetQuatTf, '/quaternion_tf')
+
 
     def setup(self) -> None:
         """Set up the joints values, retrieve all init info using GetJointsFullState srv."""
@@ -364,6 +367,23 @@ class ReachySDKServer(Node,
         return kin_pb.JointsPosition(
             positions=resp.disk_pos.position,
         )
+    
+    def GetQuaternionTransform(self, request: orbita_pb.Point, context):
+        ros_req = GetQuatTf.Request()
+        ros_req.point = Point(
+            x=request.x,
+            y=request.y,
+            z=request.z,
+        )
+        resp = self.quat_tf.call(ros_req)
+        return orbita_pb.OrbitaTarget(
+            q=orbita_pb.Quaternion(
+                    w= resp.quat.w,
+                    x= resp.quat.x,
+                    y= resp.quat.y,
+                    z= resp.quat.z,
+                )
+            )
 
     # Arm kinematics GRPC
     def ComputeArmFK(self, request: armk_pb.ArmJointsPosition, context) -> armk_pb.ArmEndEffector:
@@ -412,28 +432,45 @@ class ReachySDKServer(Node,
         )
 
     def SendCartesianCommand(self, request: cart_pb.FullBodyCartesianCommand, context) -> cart_pb.CartesianCommandAck:
-        goal_position = {}
-
-        if request.HasField('left_arm_end_effector'):
-            request.left_arm_end_effector.side = armk_pb.ArmSide.LEFT
-            resp = self._call_arm_ik(request.left_arm_end_effector)
-            goal_position.update(dict(zip(resp.joint_position.name, resp.joint_position.position)))
+        def bg():
+            goal_position = {}
+
+            if request.HasField('left_arm_end_effector'):
+                request.left_arm_end_effector.side = armk_pb.ArmSide.LEFT
+                resp = self._call_arm_ik(request.left_arm_end_effector)
+                goal_position.update(dict(zip(resp.joint_position.name, resp.joint_position.position)))
+
+            if request.HasField('right_arm_end_effector'):
+                request.right_arm_end_effector.side = armk_pb.ArmSide.RIGHT
+                resp = self._call_arm_ik(request.right_arm_end_effector)
+                goal_position.update(dict(zip(resp.joint_position.name, resp.joint_position.position)))
+
+            if request.HasField('orbita_target'):
+                resp = self.ComputeOrbitaIK(request.orbita_target, context)
+                disks = ['neck_disk_top', 'neck_disk_middle', 'neck_disk_bottom']
+                goal_position.update(dict(zip(disks, resp.positions)))
+
+            for name, pos in goal_position.items():
+                self.joints[name]['goal_position'] = pos
+            self.should_publish_position.set()
 
-        if request.HasField('right_arm_end_effector'):
-            request.right_arm_end_effector.side = armk_pb.ArmSide.RIGHT
-            resp = self._call_arm_ik(request.right_arm_end_effector)
-            goal_position.update(dict(zip(resp.joint_position.name, resp.joint_position.position)))
+        t = threading.Thread(target=bg)
+        t.daemon = True
+        t.start()
 
-        if request.HasField('orbita_target'):
-            resp = self.ComputeOrbitaIK(request.orbita_target, context)
-            disks = ['neck_disk_top', 'neck_disk_middle', 'neck_disk_bottom']
-            goal_position.update(dict(zip(disks, resp.positions)))
+        while not t.is_alive():
+            time.sleep(0.001)
 
-        for name, pos in goal_position.items():
-            self.joints[name]['goal_position'] = pos
-        self.should_publish_position.set()
+        for _ in range(100):
+            if not t.is_alive():
+                success = True
+                break
+            time.sleep(0.001)
+        else:
+            self.logger.warning('ik service timeout!')
+            success = False
 
-        return cart_pb.CartesianCommandAck(success=True)
+        return cart_pb.CartesianCommandAck(success=success)
 
     def StreamCartesianCommands(self, request_iterator: cart_pb.FullBodyCartesianCommand, context) -> cart_pb.CartesianCommandAck:
         for request in request_iterator:
